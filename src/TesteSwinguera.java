import java.awt.Toolkit;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;

import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;


/**
 *
 * @authors Antônio Marcos
 */
public class TesteSwinguera extends javax.swing.JFrame {
    private TelaAdicionar telaAdicionar;
    private EditorInvest editorInvest;
    Object[] opcoes = {"Sim", "Não"};
    
    public TesteSwinguera() {
        initComponents();
        
        DefaultTableModel modelo = (DefaultTableModel) table.getModel();
        table.setRowSorter(new TableRowSorter(modelo));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        popAdicionar = new javax.swing.JMenuItem();
        popEditar = new javax.swing.JMenuItem();
        popRemover = new javax.swing.JMenuItem();
        popCancelar = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        btnTelaAdicionar = new javax.swing.JButton();
        EditorInvest = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnExportTxt = new javax.swing.JButton();
        spinBuscarID = new javax.swing.JSpinner();
        btnBuscar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPopupMenu2.setComponentPopupMenu(jPopupMenu2);

        popAdicionar.setText("Adicionar");
        popAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popAdicionarActionPerformed(evt);
            }
        });
        jPopupMenu2.add(popAdicionar);

        popEditar.setText("Editar");
        popEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popEditarActionPerformed(evt);
            }
        });
        jPopupMenu2.add(popEditar);

        popRemover.setText("Remover");
        popRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popRemoverActionPerformed(evt);
            }
        });
        jPopupMenu2.add(popRemover);

        popCancelar.setText("Cancelar");
        jPopupMenu2.add(popCancelar);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simulador de investimentos");
        setMinimumSize(new java.awt.Dimension(904, 300));

        jPanel2.setComponentPopupMenu(jPopupMenu2);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tipo Investimento", "Investimento inicial (R$)", "Resultado (R$)", "Rendimento (%)", "Tempo", "Taxa (%)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setComponentPopupMenu(jPopupMenu2);
        table.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        table.setMinimumSize(new java.awt.Dimension(1000, 500));
        jScrollPane2.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setPreferredWidth(10);
            table.getColumnModel().getColumn(1).setPreferredWidth(85);
            table.getColumnModel().getColumn(2).setPreferredWidth(85);
            table.getColumnModel().getColumn(3).setPreferredWidth(50);
            table.getColumnModel().getColumn(4).setPreferredWidth(40);
            table.getColumnModel().getColumn(5).setPreferredWidth(10);
            table.getColumnModel().getColumn(6).setPreferredWidth(10);
        }

        btnTelaAdicionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        btnTelaAdicionar.setText("Adicionar");
        btnTelaAdicionar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTelaAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTelaAdicionarActionPerformed(evt);
            }
        });

        EditorInvest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/table_edit.png"))); // NOI18N
        EditorInvest.setText("Editar");
        EditorInvest.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        EditorInvest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditorInvestActionPerformed(evt);
            }
        });

        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        btnRemove.setText("Remover");
        btnRemove.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnExportTxt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/table_go.png"))); // NOI18N
        btnExportTxt.setText("Exportar para txt");
        btnExportTxt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnExportTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportTxtActionPerformed(evt);
            }
        });

        spinBuscarID.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        spinBuscarID.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/magnifier.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jLabel2.setText("Pesquisar por ID:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnExportTxt)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnTelaAdicionar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(EditorInvest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(272, 272, 272)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spinBuscarID, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(btnTelaAdicionar)
                        .addGap(18, 18, 18)
                        .addComponent(EditorInvest)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExportTxt)
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBuscar)
                            .addComponent(spinBuscarID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2)))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        
    
    private void btnTelaAdicionarActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        if (telaAdicionar == null || !telaAdicionar.isDisplayable()) {
            telaAdicionar = new TelaAdicionar(this, (DefaultTableModel) table.getModel());
            telaAdicionar.setVisible(true);
        } else {
            telaAdicionar.toFront();
            telaAdicionar.requestFocus();
            Toolkit.getDefaultToolkit().beep();
        }
    }                                                

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {                                          
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int selectedRowIndex = table.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Por favor, selecione uma linha para remover.","Aviso!",JOptionPane.WARNING_MESSAGE);
            return;
        }
        Object id = (Object) table.getValueAt(selectedRowIndex, 0);
        int opcaoEsc = JOptionPane.showOptionDialog(null, 
                "Tem certeza que deseja remover\n\"ID: " + id + "\"?", 
                "Confirmação de remoção do ID " + id, 
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                opcoes,
                opcoes[0]
        );
        
        if (opcaoEsc == JOptionPane.YES_OPTION) {
            model.removeRow(selectedRowIndex);
            JOptionPane.showMessageDialog(null, "ID " + id + " removido!");
        }
        
    }                                         

    private void EditorInvestActionPerformed(java.awt.event.ActionEvent evt) {                                             
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int selectedRowIndex = table.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Por favor, selecione uma linha para editar.");
            return;
        }

        int quantColunas = table.getColumnCount();
        Object[] dados = new Object[quantColunas];
        for (int i = 0; i < quantColunas; i++) {
            dados[i] = table.getValueAt(selectedRowIndex, i);
        }
        Object id = (Object) dados[0];

        int opcaoEsc = JOptionPane.showOptionDialog(null,
            "Tem certeza que deseja editar?\nID: " + id + ", Tipo Investimento: " + dados[1] + ", Investimento inicial (R$): " + dados[2] + 
            ", Resultado (R$): " + dados[3] + ", Rendimento (%): " + dados[4] + ", Tempo: " + dados[5] + ", Taxa (%): " + dados[6],
            "Confirmação de edição do ID " + id,
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            opcoes,null

        );

        if (opcaoEsc == JOptionPane.YES_OPTION) {
            editorInvest = new EditorInvest(model, selectedRowIndex);

            // Preenche os campos com os valores existentes
            editorInvest.setValor(dados[2].toString());
            String tempoStr = dados[5].toString().replaceAll("[^\\d]", "");
            editorInvest.setTempo(Integer.parseInt(tempoStr));

            editorInvest.setLocationRelativeTo(null);
            editorInvest.setVisible(true);
        }
    }                                            

    private void btnExportTxtActionPerformed(java.awt.event.ActionEvent evt) {                                             
        DefaultTableModel model = (DefaultTableModel) table.getModel();

        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Nenhuma simulação para exportar.", "Aviso!", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("registros.txt"))) {
            writer.write("ID | Tipo Investimento | Investimento Inicial (R$) | Resultado (R$) | Rendimento (%) | Tempo | Taxa (%)");
            writer.newLine();
            writer.write("-------------------------------------------------------------------------------------------------------");
            writer.newLine();

            // Dados da tabela
            for (int i = 0; i < model.getRowCount(); i++) {
                StringBuilder linha = new StringBuilder();
                for (int j = 0; j < model.getColumnCount(); j++) {
                    linha.append(model.getValueAt(i, j));
                    if (j < model.getColumnCount() - 1) {
                        linha.append(" | ");
                    }
                }
                writer.write(linha.toString());
                writer.newLine();
            }

            writer.flush();
            JOptionPane.showMessageDialog(this, "Exportação concluída! Arquivo salvo como 'registros.txt'.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Erro ao exportar: " + e.getMessage(), "Erro!", JOptionPane.ERROR_MESSAGE);
        }
    }                                            

    private void popAdicionarActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
         if (telaAdicionar == null || !telaAdicionar.isDisplayable()) {
            telaAdicionar = new TelaAdicionar(this, (DefaultTableModel) table.getModel());
            telaAdicionar.setVisible(true);
        } else {
            telaAdicionar.toFront();
            telaAdicionar.requestFocus();
            Toolkit.getDefaultToolkit().beep();
        }           
    }                                            

    private void popEditarActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int selectedRowIndex = table.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Por favor, selecione uma linha para editar.");
            return;
        }

        int quantColunas = table.getColumnCount();
        Object[] dados = new Object[quantColunas];
        for (int i = 0; i < quantColunas; i++) {
            dados[i] = table.getValueAt(selectedRowIndex, i);
        }
        Object id = (Object) dados[0];

        int opcaoEsc = JOptionPane.showOptionDialog(null,
            "Tem certeza que deseja editar?\nID: " + id + ", Tipo Investimento: " + dados[1] + ", Investimento inicial (R$): " + dados[2] + 
            ", Resultado (R$): " + dados[3] + ", Rendimento (%): " + dados[4] + ", Tempo: " + dados[5] + ", Taxa (%): " + dados[6],
            "Confirmação de edição do ID " + id,
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            opcoes,
            opcoes[0]
        );

        if (opcaoEsc == JOptionPane.YES_OPTION) {
            editorInvest = new EditorInvest(model, selectedRowIndex);

            // Preenche os campos com os valores existentes
            editorInvest.setValor(dados[2].toString());
            String tempoStr = dados[5].toString().replaceAll("[^\\d]", "");
            editorInvest.setTempo(Integer.parseInt(tempoStr));

            editorInvest.setLocationRelativeTo(null);
            editorInvest.setVisible(true);
        }
    }                                         

    private void popRemoverActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int selectedRowIndex = table.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Por favor, selecione uma linha para remover.","Aviso!",JOptionPane.WARNING_MESSAGE);
            return;
        }
        Object id = (Object) table.getValueAt(selectedRowIndex, 0);
        int opcaoEsc = JOptionPane.showOptionDialog(null, 
                "Tem certeza que deseja remover\n\"ID: " + id + "\"?", 
                "Confirmação de remoção do ID " + id, 
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                opcoes,
                opcoes[0]
        );
        
        if (opcaoEsc == JOptionPane.YES_OPTION) {
            model.removeRow(selectedRowIndex);
            JOptionPane.showMessageDialog(null, "ID " + id + " removido!");
        }
    }                                          

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        
    }                                         

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TesteSwinguera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TesteSwinguera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TesteSwinguera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TesteSwinguera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TesteSwinguera().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton EditorInvest;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnExportTxt;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnTelaAdicionar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenuItem popAdicionar;
    private javax.swing.JMenuItem popCancelar;
    private javax.swing.JMenuItem popEditar;
    private javax.swing.JMenuItem popRemover;
    private javax.swing.JSpinner spinBuscarID;
    private javax.swing.JTable table;
    // End of variables declaration                   
}
